#!/usr/bin/python
# -*- coding: utf-8 -*-

DOCUMENTATION = '''
---
module: mssql_sql
short_description: Execute arbitrary sql
description:
    - Execute arbitrary sql against a SQL Server database
version_added: "0.1.0.0"
options:
    username:
        description:
            - The database username to connect to the database
        required: false
        default: None
        aliases: ['un']
    password:
        description:
            - The password to connect to the database
        required: false
        default: None
        aliases: ['pw']
    database_name:
        description:
            - The database_name to connect to the database
        required: true
        default: database_name
        aliases: ['dn']
    instance:
        description:
            - The instance for the database
        required: false
        default: localhost
        aliases: ['in']
    port:
        description:
            - The listener port to connect to the database
        required: false
        default: 1433
    tsql:
        description:
            - The SQL you want to execute
        required: false
    script:
        description:
            - The script you want to execute. Doesn't handle selects
        required: false
notes:
    - pyodbc, msodbcsql17, and unixODBC-devel need to be installed
requirements: [ "pyodbc", "msodbcsql17", "unixODBC-devel" ]
author: Kevin Lidh, kevin.lidh@gmail.com
'''

EXAMPLES = '''
# Execute arbitrary sql
- oracle_sql:
    username: "{{ user }}"
    password: "{{ password }}"
    database_name: sampledb
    tsql: 'select name from master.sys.sysusers'
# Execute arbitrary script1
- oracle_sql:
    username: "{{ user }}"
    password: "{{ password }}"
    database_name: sampledb
    script: /u01/scripts/create-all-the-procedures.sql
# Execute arbitrary script2
- oracle_sql:
    username: "{{ user }}"
    password: "{{ password }}"
    database_name: sampledb
    script: /u01/scripts/create-tables-and-insert-default-values.sql
'''
import os
from ansible.module_utils.basic import AnsibleModule

try:
    import pyodbc
except ImportError:
    pyodbc = False
else:
    pyodbc = True

def execute_sql_get(module, cursor, tsql):
    try:
        cursor.execute(tsql)
        result = (cursor.fetchall())
    except pyodbc.Error as exc:
        error, = exc.args
        msg = 'Something went wrong while executing sql_get - %s tsql: %s' % (error.message, tsql)
        module.fail_json(msg=msg, changed=False)
        return False
    return result

def execute_sql(module, cursor, conn, tsql):
    if 'insert' or 'delete' or 'update' in tsql.lower():
        docommit = True
    else:
        docommit = False

    try:
        # module.exit_json(msg=sql.strip())
        cursor.execute(tsql)
    except pyodbc.Error as exc:
        error, = exc.args
        msg = 'Something went wrong while executing sql - %s sql: %s' % (error.message, sql)
        module.fail_json(msg=msg, changed=False)
        return False
    if docommit:
        conn.commit()
    return True

NOTUSED = '''
def read_file(module, script):
    try:
        f = open(script, 'r')
        sqlfile = f.read()
        f.close()
        return sqlfile
    except IOError as e:
        msg = 'Couldn\'t open/read file: %s' % (e)
        module.fail_json(msg=msg, changed=False)
    return


def clean_sqlfile(sqlfile):
    sqlfile = sqlfile.strip()
    sqlfile = sqlfile.lstrip()
    sqlfile = sqlfile.lstrip()
    sqlfile = os.linesep.join([s for s in sqlfile.splitlines() if s])
    return sqlfile
'''

def main():

    module = AnsibleModule(
        argument_spec=dict(
            user=dict(required=False, aliases=['un', 'username']),
            password=dict(required=False, no_log=True, aliases=['pw']),
            #mode=dict(default="normal", choices=["sysasm", "sysdba", "normal"]),
            database_name=dict(required=False, aliases=['dn']),
            instance=dict(required=False, default='localhost', aliases=['in']),
            port=dict(required=False, default=1433),
            tsql=dict(required=False),
            script=dict(required=False),

        ),
        mutually_exclusive=[['sql', 'script']]
    )

    user = module.params["user"]
    password = module.params["password"]
    #mode = module.params["mode"]
    database_name = module.params["database_name"]
    instance = module.params["instance"]
    port = module.params["port"]
    tsql = module.params["tsql"]
    script = module.params["script"]

    if not pyodbc_exists:
        msg = "The pyodbc module is required."
        module.fail_json(msg=msg)

    #wallet_connect = '/@%s' % service_name

    try:
        if user and password:
                conn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER='+instance+';DATABASE='+database_name+';UID='+user+';PWD='+ password)

        elif not user or not password:
            module.fail_json(msg='Missing username or password for pyodbc')

    except pyodbc.Error as exc:
        error, = exc.args
        msg = 'Could not connect to database - %s, connect descriptor: %s' % (error.message, connect)
        module.fail_json(msg=msg, changed=False)

    cursor = conn.cursor()

    if tsql:
        if sql.lower().startswith('begin '):
            execute_sql(module, cursor, conn, sql)
            msg = 'SQL executed: %s' % (sql)
            module.exit_json(msg=msg, changed=True)

        else:
            sql = sql.rstrip(';')
            if sql.lower().startswith('select '):
                result = execute_sql_get(module, cursor, sql)
                module.exit_json(msg=result, changed=False)
            else:
                execute_sql(module, cursor, conn, sql)
                msg = 'SQL executed: %s' % (sql)
                module.exit_json(msg=msg, changed=True)
    else:
        sqlfile = read_file(module, script)
        if len(sqlfile) > 0:
            sqlfile = clean_sqlfile(sqlfile)
            
            if sqlfile.endswith('/') or ('create or replace') in sqlfile.lower():
                sqldelim = '/'
            else:
                sqldelim = ';'
            
            sqlfile = sqlfile.strip(sqldelim)
            tsql = sqlfile.split(sqldelim)
            
            for q in tsql:
                execute_sql(module, cursor, conn, q)
            msg = 'Finished running script %s \nContents: \n%s' % (script, sqlfile)
            module.exit_json(msg=msg, changed=True)
        else:
            module.fail_json(msg='SQL file seems to be empty')

    module.exit_json(msg="Unhandled exit", changed=False)


if __name__ == '__main__':
    main()
